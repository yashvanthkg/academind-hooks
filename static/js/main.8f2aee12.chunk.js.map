{"version":3,"sources":["components/hooks/https.js","components/CharPicker.js","components/Summary.js","components/Character.js","App.js","index.js"],"names":["useHttp","url","dependencies","useState","isLoading","setIsLoading","fetchedData","setFetchedData","useEffect","console","log","fetch","then","response","ok","Error","json","data","catch","err","CharPicker","props","selectedChars","results","slice","map","char","index","name","id","content","length","onChange","onCharSelect","value","selectedChar","className","side","Summary","gender","height","hairColor","skinColor","movieCount","Character","loadedCharacter","colors","hair","hair_color","skin","skin_color","films","React","memo","App","destroyed","setDestroyed","selectedCharacter","setSelectedCharacter","chosenSide","setChosenSide","sideHandler","Fragment","event","charId","target","onClick","bind","ReactDOM","render","document","getElementById"],"mappings":"+PAGaA,G,MAAU,SAACC,EAAKC,GAAkB,IAAD,EACRC,oBAAS,GADD,mBACnCC,EADmC,KACxBC,EADwB,OAEJF,mBAAS,MAFL,mBAEnCG,EAFmC,KAEtBC,EAFsB,KAuB1C,OApBAC,qBAAU,WACNH,GAAa,GACbI,QAAQC,IAAI,iCAAkCT,GAC9CU,MAAMV,GACLW,MAAK,SAAAC,GACF,IAAKA,EAASC,GACd,MAAM,IAAIC,MAAM,oBAEhB,OAAOF,EAASG,UAEnBJ,MAAK,SAAAK,GACFZ,GAAa,GACbE,EAAeU,MAElBC,OAAM,SAAAC,GACHV,QAAQC,IAAIS,GACZd,GAAa,QAElBH,GAEI,CAACE,EAAWE,KCkBRc,EAxCK,SAACC,GAAW,IAAD,EAEMrB,EAAQ,gCAAiC,IAF/C,mBAEpBI,EAFoB,KAETE,EAFS,KAIrBgB,EAAgBhB,EACpBA,EAAYiB,QACbC,MAAM,EAAE,GACRC,KAAI,SAACC,EAAMC,GAAP,MAAkB,CACnBC,KAAMF,EAAKE,KACXC,GAAIF,EAAM,MACR,GAEFG,EAAU,sDAyBd,OAvBK1B,GACDkB,GACAA,EAAcS,OAAS,EAEvBD,EACA,wBACIE,SAAUX,EAAMY,aAChBC,MAAOb,EAAMc,aACbC,UAAWf,EAAMgB,KAHrB,SAKKf,EAAcG,KAAI,SAAAC,GAAI,OACvB,wBAAsBQ,MAAOR,EAAKG,GAAlC,SACKH,EAAKE,MADGF,EAAKG,SAOrBzB,GACCkB,GAA0C,IAAzBA,EAAcS,SAEjCD,EAAU,2DAEPA,GCdIQ,G,MAvBC,SAAAjB,GACd,OACE,sBAAKe,UAAU,UAAf,UACE,6BAAKf,EAAMO,OACX,yCACU,sBAAMQ,UAAU,kBAAhB,SAAmCf,EAAMkB,YAEnD,yCACU,sBAAMH,UAAU,kBAAhB,SAAmCf,EAAMmB,YAEnD,yDAC2B,IACzB,sBAAMJ,UAAU,kBAAhB,SAAmCf,EAAMoB,YAF3C,KAE+D,IAC7D,sBAAML,UAAU,kBAAhB,SAAmCf,EAAMqB,eAE3C,qDACuB,IACrB,sBAAMN,UAAU,kBAAhB,SAAmCf,EAAMsB,qBCjB3CC,EAAa,SAACvB,GAAW,IAAD,EAEOrB,EAAQ,gCAAgCqB,EAAMc,aAAc,CAACd,EAAMc,eAF1E,mBAEpB/B,EAFoB,KAETE,EAFS,KAGtBuC,EAAkB,KACnBvC,IACCuC,EAAkB,CACdhB,GAAIR,EAAMc,aACVP,KAAMtB,EAAYsB,KAClBY,OAAQlC,EAAYkC,OACpBM,OAAQ,CACJC,KAAMzC,EAAY0C,WAClBC,KAAM3C,EAAY4C,YAEtBX,OAAQjC,EAAYiC,OACpBI,WAAYrC,EAAY6C,MAAMpB,SAItCvB,qBAAU,WACN,OAAO,WACHC,QAAQC,IAAI,6BAEjB,IAEH,IAAIoB,EAAU,qDAgBd,OAdK1B,GAAayC,EACdf,EACA,cAAC,EAAD,CACIF,KAAMiB,EAAgBjB,KACtBW,OAAQM,EAAgBN,OACxBC,OAAQK,EAAgBL,OACxBC,UAAWI,EAAgBC,OAAOC,KAClCL,UAAWG,EAAgBC,OAAOG,KAClCN,WAAYE,EAAgBF,aAGxBvC,GAAcyC,IACtBf,EAAU,4DAEPA,GAGIsB,MAAMC,KAAKT,G,SCAXU,EA1CH,WAAO,IAAD,EAEkBnD,oBAAS,GAF3B,mBAEToD,EAFS,KAEEC,EAFF,OAGkCrD,mBAAS,GAH3C,mBAGTsD,EAHS,KAGUC,EAHV,OAIoBvD,mBAAS,SAJ7B,mBAITwD,EAJS,KAIGC,EAJH,KAMVC,EAAc,SAAAxB,GAClBuB,EAAcvB,IAYZP,EACF,eAAC,IAAMgC,SAAP,WACE,cAAC,EAAD,CACEzB,KAAMsB,EACNxB,aAAcsB,EACdxB,aAdoB,SAAA8B,GACxB,IAAMC,EAASD,EAAME,OAAO/B,MAC5BwB,EAAqBM,MAcnB,cAAC,EAAD,CAAW7B,aAAcsB,IACzB,wBAAQS,QAASL,EAAYM,KAAK,EAAM,SAAxC,wBAGA,wBAAQD,QAASL,EAAYM,KAAK,EAAM,QAAxC,uBACgB,SAAfR,GACC,wBAAQO,QAjBa,WACzBV,GAAa,IAgBT,yBAON,OAHID,IACFzB,EAAU,qDAELA,GCtCTsC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.8f2aee12.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\n\nexport const useHttp = (url, dependencies) => {\n    const [isLoading, setIsLoading] = useState(false);\n    const [fetchedData, setFetchedData] = useState(null);\n    useEffect(() => {\n        setIsLoading(true);\n        console.log(\"Sendding http request to Url: \"+ url);\n        fetch(url)\n        .then(response => {\n            if (!response.ok) {\n            throw new Error('Failed to fetch.');\n            }\n            return response.json();\n        })\n        .then(data => {\n            setIsLoading(false);\n            setFetchedData(data);\n        })\n        .catch(err => {\n            console.log(err);\n            setIsLoading(false);\n        });\n    }, dependencies)\n\n    return [isLoading, fetchedData];\n}","import React from 'react';\nimport './CharPicker.css';\nimport { useHttp } from '../components/hooks/https';\n\nconst  CharPicker = (props) => {\n\n    const [isLoading, fetchedData] = useHttp('https://swapi.dev/api/people/', [])\n\n    const selectedChars = fetchedData\n    ? fetchedData.results\n    .slice(0,5)\n    .map((char, index) => ({\n        name: char.name,\n        id: index+1\n    })) : [];\n\n    let content = <p>Loading characters...</p>;\n    if (\n        !isLoading &&\n        selectedChars &&\n        selectedChars.length > 0\n    ) {\n        content = (\n        <select\n            onChange={props.onCharSelect}\n            value={props.selectedChar}\n            className={props.side}\n        >\n            {selectedChars.map(char => (\n            <option key={char.id} value={char.id}>\n                {char.name}\n            </option>\n            ))}\n        </select>\n        );\n    } else if (\n        !isLoading &&\n        (!selectedChars || selectedChars.length === 0)\n    ) {\n        content = <p>Could not fetch any data.</p>;\n    }\n    return content;\n}\n\nexport default CharPicker;","import React from 'react';\n\nimport './Summary.css';\n\nconst Summary = props => {\n  return (\n    <div className=\"summary\">\n      <h1>{props.name}</h1>\n      <p>\n        Gender: <span className=\"summary__output\">{props.gender}</span>\n      </p>\n      <p>\n        Height: <span className=\"summary__output\">{props.height}</span>\n      </p>\n      <p>\n        Hair Color / Skin Color:{' '}\n        <span className=\"summary__output\">{props.hairColor}</span> /{' '}\n        <span className=\"summary__output\">{props.skinColor}</span>\n      </p>\n      <p>\n        Appears in # Movies:{' '}\n        <span className=\"summary__output\">{props.movieCount}</span>\n      </p>\n    </div>\n  );\n};\n\nexport default Summary;","import React, { useEffect} from 'react';\nimport { useHttp } from '../components/hooks/https';\nimport Summary from './Summary';\n\nconst Character =  (props) => {\n\n    const[isLoading, fetchedData] =  useHttp('https://swapi.dev/api/people/'+props.selectedChar, [props.selectedChar]);\n    let loadedCharacter = null;\n    if(fetchedData) {\n        loadedCharacter = {\n            id: props.selectedChar,\n            name: fetchedData.name,\n            height: fetchedData.height,\n            colors: {\n                hair: fetchedData.hair_color,\n                skin: fetchedData.skin_color\n            },\n            gender: fetchedData.gender,\n            movieCount: fetchedData.films.length\n        };\n    }\n\n    useEffect(() => {\n        return () => {\n            console.log(\"component will unmount\");\n        }\n    }, [])\n\n    let content = <p>Loading Character...</p>;\n\n    if (!isLoading && loadedCharacter) {\n        content = (\n        <Summary\n            name={loadedCharacter.name}\n            gender={loadedCharacter.gender}\n            height={loadedCharacter.height}\n            hairColor={loadedCharacter.colors.hair}\n            skinColor={loadedCharacter.colors.skin}\n            movieCount={loadedCharacter.movieCount}\n        />\n        );\n    } else if (!isLoading && !loadedCharacter) {\n        content = <p>Failed to fetch character.</p>;\n    }\n    return content;\n}\n\nexport default React.memo(Character);","import React, { useState } from 'react';\n\nimport CharPicker from './components/CharPicker';\nimport Character from './components/Character';\n\nconst App = () => {\n\n  const [destroyed, setDestroyed] = useState(false);\n  const [selectedCharacter, setSelectedCharacter] = useState(1);\n  const [chosenSide, setChosenSide] = useState('light');\n\n  const sideHandler = side => {\n    setChosenSide(side);\n  };\n\n  const charSelectHandler = event => {\n    const charId = event.target.value;\n    setSelectedCharacter(charId);\n  };\n\n  const destructionHandler = () => {\n    setDestroyed(true);\n  };\n\n  let content = (\n    <React.Fragment>\n      <CharPicker\n        side={chosenSide}\n        selectedChar={selectedCharacter}\n        onCharSelect={charSelectHandler}\n      />\n      <Character selectedChar={selectedCharacter} />\n      <button onClick={sideHandler.bind(this, 'light')}>\n        Light Side\n      </button>\n      <button onClick={sideHandler.bind(this, 'dark')}>Dark Side</button>\n      {chosenSide === 'dark' && (\n        <button onClick={destructionHandler}>DESTROY!</button>\n      )}\n    </React.Fragment>\n  );\n  if (destroyed) {\n    content = <h1>Total destruction!</h1>;\n  }\n  return content;\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}